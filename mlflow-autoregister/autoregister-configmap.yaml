apiVersion: v1
kind: ConfigMap
metadata:
  name: autoregister-script
  namespace: default
data:
  auto_register_models.py: |
    import subprocess
    import mlflow
    import json
    import time
    from mlflow.tracking import MlflowClient
    from mlflow import register_model
    MLFLOW_TRACKING_URI = "http://mlflow-service.default.svc.cluster.local:5000"
    REGISTERED_MODELS = set()

    from kubernetes import client, config

    def get_kubeai_models():
        config.load_incluster_config()
        api = client.CustomObjectsApi()

        group = "kubeai.org"
        version = "v1"
        plural = "models"
        namespace = "default"

        response = api.list_namespaced_custom_object(
            group=group,
            version=version,
            namespace=namespace,
            plural=plural
        )

        models = []
        for item in response.get("items", []):
            name = item["metadata"]["name"]
            uri = item["spec"].get("url", "")
            if uri:
                models.append((name, uri))
        return models

    def register_and_promote_model(name, uri):
        mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
        client = MlflowClient()
        try:
            result = register_model(model_uri=uri, name=name)
            version = result.version
            client.transition_model_version_stage(
                name=name,
                version=version,
                stage="Production",
                archive_existing_versions=True
            )
            print(f" Zarejestrowano i promowano model: {name} (v{version})")
        except Exception as e:
            print(f" Błąd przy rejestracji modelu {name}: {e}")

    def main():
        while True:
            models = get_kubeai_models()
            for name, uri in models:
                if name not in REGISTERED_MODELS:
                    register_and_promote_model(name, uri)
                    REGISTERED_MODELS.add(name)
            time.sleep(60)

    if __name__ == "__main__":
        main()
